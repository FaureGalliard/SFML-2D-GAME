@startuml ForestGameClassDiagram

' Game class to manage the overall game state
class Game {
  -map: Map
  -player: Player
  -enemies: Skeleton[]
  -gameState: String
  -level: int
  +startGame()
  +saveGame()
  +loadGame()
  +update()
  +render()
  +increaseLevel()
  +endGame()
}

' Player class for the protagonist (lumberjack)
class Player {
  -position: Vector2D
  -hairType: String
  -inventory: Inventory
  -health: int
  +move(direction: String)
  +plantSeed(seedType: String)
  +useTool(tool: Tool)
  +fillBucket(well: Well)
  +waterPlant(plant: Plant)
  +attack(enemy: Skeleton)
  +customizeHair(hairType: String)
}

' Inventory class to manage player items
class Inventory {
  -seeds: Seed[]
  -tools: Tool[]
  -bucket: Bucket
  +addSeed(seed: Seed)
  +addTool(tool: Tool)
  +getBucket(): Bucket
  +getSeeds(): Seed[]
  +getTools(): Tool[]
}

' Bucket class for water management
class Bucket {
  -waterLevel: int
  -maxCapacity: int
  +fill()
  +useWater(amount: int)
  +isEmpty(): bool
}

' Tool class for player actions
class Tool {
  -type: String
  -damage: int
  +use(target: Object)
}

' Plant class for trees and vegetables
class Plant {
  -type: String
  -growthStage: int
  -isBurning: bool
  +grow()
  +water()
  +burn()
  +isFullyGrown(): bool
}

' Tree class, a specific type of Plant
class Tree {
  -height: int
  +chop()
}

' Fire class to represent spreading fire
class Fire {
  -position: Vector2D
  -spreadRate: float
  +spread()
  +extinguish()
}

' Abstract Enemy class for skeletons
abstract class Enemy {
  -position: Vector2D
  -health: int
  +attack(player: Player)
  +move()
  +die()
}

' Skeleton class for regular enemies
class Skeleton {
  -attackType: String
  +setRandomAttack()
  +startFire(fire: Fire)
}

' GiantSkeleton class for the boss
class GiantSkeleton {
  -specialAttack: String
  +useSpecialAttack()
}

' Map class for the game world
class Map {
  -tiles: Tile[][]
  -wells: Well[]
  -plants: Plant[]
  -fires: Fire[]
  +generateProceduralMap()
  +updateEnvironment()
  +destroyObject(object: Object)
}

' Well class for water source
class Well {
  -position: Vector2D
  +fillBucket(bucket: Bucket)
}



' Relationships
Game "1" --> "1" Player
Game "1" --> "1" Map
Game "1" --> "*" Enemy
Player "1" --> "1" Inventory
Inventory "1" --> "1" Bucket
Inventory "1" --> "*" Tool
Inventory "1" --> "*" Seed
Map "1" --> "*" Tile
Map "1" --> "*" Plant
Map "1" --> "*" Fire
Map "1" --> "*" Well
Plant <|-- Tree
Enemy <|-- Skeleton
Enemy <|-- GiantSkeleton
Skeleton --> Fire : can start
Player --> Skeleton : attacks
Player --> Plant : plants/waters
Player --> Fire : extinguishes
Player --> Well : fills bucket

@enduml